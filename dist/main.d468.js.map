{"version":3,"sources":["webpack:///./src/symbol.js","webpack:///./src/calculator.js","webpack:///./src/domElement.js","webpack:///./src/index.js"],"names":["Btn","number","type","is","element","test","operator","length","equal","this","symbol","dot","clear","switchSign","percent","math","require","Calculator","_classCallCheck","stack","topType","afterEqual","_createClass","key","value","top","setTop","i","digitIndex","total","eval","join","lastDigit","isFinite","toString","console","log","isEqual","append","push","pop","getTotal","includes","buttons","document","getElementById","result","resultContainer","addTypeAsClassName","target","keys","Object","classList","add","resize","currentSize","offsetWidth","parseFloat","window","getComputedStyle","getPropertyValue","style","fontSize","innerHTML","rePosition","distance","offsetHeight","marginTop","arr","parent","map","row","btn","createElement","appendChild","setAttribute","createBtn","calcualtor","nodes","childNodes","addEventListener","e","preventDefault","remove","eType","className","val","calc","ans","addev"],"mappings":"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","file":"main.d468.js","sourcesContent":["export let elements = [\n    [\"C\", \"+/-\", \"%\", \"/\"],\n    [7, 8, 9, \"*\"],\n    [4, 5, 6, \"-\"],\n    [1, 2, 3, \"+\"],\n    [0, \".\", \"=\"],\n];\n\n\nexport const Btn = {\n    number: {\n        type: \"number\",\n        is: function(element) {\n            return /\\d/g.test(element);\n        },\n    },\n    operator: {\n        type: \"operator\",\n        is: function(element) {\n            return element.length === 1 && /[+\\-*/]/g.test(element);\n        },\n    },\n    equal: {\n        type: \"equal\",\n        is: function(element) {\n            return element === this.symbol;\n        },\n        symbol: \"=\",\n    },\n    dot: {\n        type: \"dot\",\n        is: function(element) {\n            return element === this.symbol;\n        },\n        symbol: \".\",\n    },\n    clear: {\n        type: \"clear\",\n        is: function(element) {\n            return element === this.symbol;\n        },\n        symbol: \"C\",\n    },\n    switchSign: {\n        type: \"switchSign\",\n        is: function(element) {\n            return element === this.symbol;\n        },\n        symbol: \"+/-\",\n    },\n    percent: {\n        type: \"percent\",\n        is: function(element) {\n            return element === this.symbol;\n        },\n        symbol: \"%\",\n    }\n};\n","import {Btn} from \"./symbol.js\";\nvar math = require(\"mathjs\");\n\n/*\n * A Calculator class\n */\nexport class Calculator {\n  constructor() {\n    this.stack = [\"0\"];\n    this.topType = Btn.number.type; // the type of last element in stack\n    this.afterEqual = false; // a flag for is equal button just pressed or not\n  }\n\n  setTop(top) {\n    this.stack[this.stack.length - 1] = top;\n  }\n\n  // get top element in calcualting stack\n  top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  // append dot or digit to stack\n  append(type, element) {\n    let top;\n    if (type === Btn.number.type) {\n      top = this.top() === \"0\" ? element : this.top() + element;\n    } else {\n      top = this.top() + Btn.dot.symbol;\n    }\n    this.setTop(top);\n  }\n\n  // reset calcuator\n  clear() {\n    this.stack = [\"0\"];\n    this.afterEqual = false;\n    this.topType = Btn.number.type;\n  }\n\n  // get lastDigit index\n  digitIndex() {\n    for (let i = this.stack.length - 1; i >= 0; i--) {\n      if (Btn.number.is(this.stack[i]) || Btn.dot.is(this.stack[i])) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  // current lastDigit value on stack\n  lastDigit() {\n    return this.stack[this.digitIndex()] || \"0\";\n  }\n\n  // return false if total is infinity\n  // get total of stack\n  getTotal() {\n    let total;\n    if (this.topType !== Btn.operator.type) {\n      total = math.eval(this.stack.join(\"\"));\n    } else {\n      // get total after pressed a operator of +-*/;\n      total = math.eval(this.stack.join(\"\") + this.lastDigit());\n    }\n    return isFinite(total) ? total.toString() : false;\n  }\n\n  calc(type, element) {\n    console.log(\"in calc, --------------\");\n    console.log(\"type\", type);\n    console.log(\"element\", element);\n    console.log(\"this.stack\", this.stack);\n\n    let isEqual = this.afterEqual;\n\n    if (\n      (isEqual &&\n                this.stack.length <= 1 &&\n                type === Btn.number.type &&\n                this.topType !== Btn.operator.type) ||\n            type === Btn.clear.type\n    ) {\n      this.clear();\n    }\n\n    switch (type) {\n      // if send a digit button [0-9]\n      case Btn.number.type: {\n        // if top is not a operator, append digit;\n        if (\n          this.topType === Btn.dot.type ||\n                    this.topType !== Btn.operator.type\n        ) {\n          this.append(type, element);\n        } else {\n          this.stack.push(element);\n          this.topType = Btn.number.type;\n        }\n        break;\n      }\n      // if send a operator button [+-*/]\n      case Btn.operator.type: {\n        //replace top if top is an operator\n        if (this.topType === Btn.operator.type) {\n          this.stack.pop();\n          //esle get total\n        } else {\n          this.stack = [this.getTotal()];\n          this.topType = Btn.number.type;\n        }\n\n        this.stack.push(element);\n        // this.afterEqual = false;\n        this.topType = Btn.operator.type;\n        break;\n      }\n      // if send a dot button [.]\n      case Btn.dot.type: {\n        if (this.top().includes(Btn.dot.symbol)) return;\n        if (this.topType === Btn.operator.type) {\n          this.stack.push(\"0\" + Btn.dot.symbol);\n        } else if (isEqual || this.topType === Btn.number.type) {\n          this.append(type, Btn.dot.symbol);\n        }\n        this.topType = Btn.dot.type;\n        break;\n      }\n      // if send a equal button [=]\n      case Btn.equal.type: {\n        this.afterEqual = true;\n        this.stack = [this.getTotal()];\n        this.topType = Btn.number.type;\n        break;\n      }\n      // if send a switch sign button [+/-]\n      case Btn.switchSign.type: {\n        this.stack[this.digitIndex()] = (\n          this.lastDigit() * -1\n        ).toString();\n        break;\n      }\n      // if send a switch sign button [%]\n      case Btn.percent.type: {\n        let total = this.getTotal();\n        if (total !== false) {\n          this.stack[this.digitIndex()] = math\n            .eval(total + \"/ 100\")\n            .toString();\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n","export let buttons = document.getElementById(\"buttons\");\nexport let result = document.getElementById(\"result\");\nexport let resultContainer = document.getElementById(\"result-container\");\n","import \"./style/style.scss\";\nimport {elements, Btn} from \"./symbol.js\";\nimport {Calculator} from \"./calculator.js\";\nimport {buttons, result, resultContainer} from \"./domElement.js\";\n\nconst createBtn = (arr, parent) => {\n    arr.map(row => {\n        row.map(element => {\n            var btn = document.createElement(\"div\");\n            btn.innerHTML = element;\n            addTypeAsClassName(element, btn);\n            parent.appendChild(btn);\n            btn.setAttribute(\"name\", element);\n        });\n    });\n};\n\nconst addTypeAsClassName = (element, target) => {\n    let keys = Object.keys(Btn);\n    for (let i = 0; i < keys.length; i++) {\n        if (Btn[keys[i]].is(element)) {\n            target.classList.add(Btn[keys[i]].type);\n            break;\n        }\n    }\n};\n\nconst resize = () => {\n    let currentSize,\n        step = 2,\n        margin = 30,\n        letterCount = 10,\n        unit = \"px\",\n        defaultFontSize = \"50px\";\n\n    while (resultContainer.offsetWidth - margin < result.offsetWidth) {\n        currentSize = parseFloat(\n            window.getComputedStyle(result, null).getPropertyValue(\"font-size\")\n        );\n        result.style.fontSize = currentSize - step + unit;\n    }\n\n    if (result.innerHTML.length < letterCount) {\n        result.style.fontSize = defaultFontSize;\n    }\n};\n\nconst rePosition = () => {\n    let distance = resultContainer.offsetHeight - result.offsetHeight;\n    result.style.marginTop = distance / 2 + \"px\";\n};\n\ncreateBtn(elements, buttons);\nlet calcualtor = new Calculator();\n\nconst addev = () => {\n    let nodes = buttons.childNodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n        nodes[i].addEventListener(\n            \"click\",\n            e => {\n                // prevent double click;\n                e.preventDefault;\n\n                // click feedback on result\n                result.classList.remove(\"shine\");\n\n                // check button type and handle event by type\n                let eType = e.target.className;\n                let val = e.target.innerHTML;\n                calcualtor.calc(eType, val);\n                if (calcualtor.stack[0] !== false) {\n                    let ans = calcualtor.lastDigit();\n                    result.innerHTML = ans;\n                } else {\n                    result.innerHTML = \"Not a Number\";\n                }\n\n                // resize totol if needed;\n                resize();\n\n                // reCenter totoal position vertically if needed\n                rePosition();\n\n                // restart click button feedback\n                result.classList.add(\"shine\");\n            },\n            false\n        );\n    }\n};\n\naddev();\n"],"sourceRoot":""}